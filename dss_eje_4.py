# %% [markdown]
# --- IMPORTACIONES ---
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import random

# %% [markdown]
# --- CONFIGURACI칍N GENERAL ---
st.set_page_config(layout="wide")
eje_desigualdad = 'Eje de desigualdad 4'
years = [2017, 2022]
quintiles = ['Q1', 'Q2', 'Q3', 'Q4', 'Q5']

st.title("游낀 Monitor de Desigualdades en Salud - Regi칩n Metropolitana")
st.warning("**Datos fake generados para prototipo**")
st.warning("Los resultados se presentan solo a nivel de quintil, ya que el tama침o muestral no permite desagregaci칩n comunal v치lida.")

# %% [markdown]
# --- SELECCI칍N DEL INDICADOR ---
indicador_salud = st.sidebar.selectbox(
    "游늷 Selecciona el indicador de salud:",
    options=[
        "Tasa de incidencia de Tuberculosis",
        "Tasa de incidencia de VIH y/o S칤filis",
        "Prevalencia de caries dentales en menores de 6 a침os",
        "Cobertura efectiva de control de Diabetes Mellitus tipo II",
        "Tasa de mortalidad infantil",
        "Tasa de mortalidad por enfermedades cardiovasculares",
        "Tasa de mortalidad por suicidio",
        "Tasa de mortalidad por C치ncer Cervicouterino",
        "Cobertura de detecci칩n precoz de C치ncer de Mama mediante mamograf칤as",
        "Cobertura de examen de medicina preventiva del adulto (EMPA)",
        "Porcentaje de reci칠n nacidos con bajo peso al nacer (< 2.500 g)",
        "Tasa de lactancia materna exclusiva a los 6 meses de edad",
    ]
)

# %% [markdown]
# --- DATOS DE ENTRADA BASE ---
COMUNAS_RM = [
    'Alhu칠', 'Buin', 'Calera de Tango', 'Cerrillos', 'Cerro Navia', 'Colina', 'Conchal칤',
    'Curacav칤', 'El Bosque', 'El Monte', 'Estaci칩n Central', 'Huechuraba', 'Independencia',
    'Isla de Maipo', 'La Cisterna', 'La Florida', 'La Granja', 'La Pintana', 'La Reina', 'Lampa',
    'Las Condes', 'Lo Barnechea', 'Lo Espejo', 'Lo Prado', 'Macul', 'Maip칰', 'Maria Pinto',
    'Melipilla', '칌u침oa', 'Padre Hurtado', 'Paine', 'Pedro Aguirre Cerda', 'Pe침aflor',
    'Pe침alol칠n', 'Pirque', 'Providencia', 'Pudahuel', 'Puente Alto', 'Quilicura', 'Quinta Normal',
    'Recoleta', 'Renca', 'San Bernardo', 'San Joaqu칤n', 'San Jos칠 de Maipo', 'San Miguel',
    'San Pedro', 'San Ram칩n', 'Santiago', 'Talagante', 'Tiltil', 'Vitacura'
]
comunas_aleatorias = random.sample(COMUNAS_RM, k=3 * len(quintiles))
quintil_dict = {
    q: comunas_aleatorias[i*3:(i+1)*3]
    for i, q in enumerate(quintiles)
}

# %% [markdown]
# --- GENERACI칍N DE TABLA BASE CON DATOS SIMULADOS ---
rows_base = []
for year in years:
    for q in quintiles:
        comuna_list = quintil_dict[q]
        poblacion_total = np.random.randint(300000, 1000000)
        casos = np.random.randint(150, 800)
        tasa = (casos / poblacion_total) * 100000
        ic_min = max(tasa - np.random.uniform(0.5, 2.0), 0)
        ic_max = tasa + np.random.uniform(0.5, 2.0)

        rows_base.append({
            'A침o': year,
            'Quintil': q,
            'Comunas': ', '.join(comuna_list),
            'Grupo Desigualdad': indicador_salud,
            'N춿 Casos': casos,
            'Poblaci칩n Total': poblacion_total,
            'Tasa Incidencia (x100k)': round(tasa, 2),
            'IC 95%': f"{round(ic_min, 2)} - {round(ic_max, 2)}"
        })

tabla_base = pd.DataFrame(rows_base)

# %% [markdown]
# --- VISUALIZACI칍N DE LA TABLA BASE ---
st.write(f"## 游늵 Tabla Base por Quintil - {eje_desigualdad} ({indicador_salud})")
st.dataframe(tabla_base, use_container_width=True)

# %% [markdown]
# --- Conceptos ---
st.markdown("""
### 游닀 Conceptos
- **IRD (칈ndice Relativo de Desigualdad):**  
  Raz칩n te칩rica entre el extremo m치s desfavorecido (0%) y m치s favorecido (100%) de la distribuci칩n poblacional **ordenada por el eje de desigualdad**. 
    - \>1: Desigualdad perjudica a grupos desfavorecidos  
    - <1: Desigualdad beneficia a grupos desfavorecidos  
  *- Calculado mediante regresi칩n de Poisson sobre rangos poblacionales acumulados.*
- **IAD (칈ndice Absoluto de Desigualdad):**  
  Diferencia absoluta te칩rica en tasas entre extremos de la gradiente social, **ajustada por la distribuci칩n poblacional**. 
  - Representa la pendiente de la regresi칩n (casos/100k hab. por unidad de rango).
  - Ejemplo: IAD=10 significa 10 casos adicionales por 100k hab. por cada 100% de desventaja acumulada.
- Una **brecha creciente** entre quintiles refleja empeoramiento de la equidad en salud, 
  pero debe confirmarse con IRD/IAD para considerar toda la distribuci칩n.
""")

# %% [markdown]
# --- C츼LCULO DE BRECHAS Y DESIGUALDAD ---
def calcular_resumen(df):
    resumen = []
    for year in years:
        df_year = df[df['A침o'] == year]
        tasas = df_year.set_index('Quintil')['Tasa Incidencia (x100k)'].sort_index()
        tasa_q1 = tasas['Q1']
        tasa_q5 = tasas['Q5']
        brecha_abs = tasa_q5 - tasa_q1
        brecha_rel = tasa_q5 / tasa_q1 if tasa_q1 != 0 else np.nan
        rr_min = round(brecha_rel - np.random.uniform(0.1, 0.4), 2)
        rr_max = round(brecha_rel + np.random.uniform(0.1, 0.4), 2)
        irs = round(np.random.uniform(1.5, 3.0), 3)
        iads = round(np.random.uniform(8.0, 15.0), 3)

        resumen.append({
            'A침o': year,
            'Tasa Q1': round(tasa_q1, 2),
            'Tasa Q5': round(tasa_q5, 2),
            'Brecha Absoluta': round(brecha_abs, 2),
            'Brecha Relativa': round(brecha_rel, 2),
            'RR (IC 95%)': f"{round(brecha_rel, 2)} ({rr_min} - {rr_max})",
            'IRD': irs,
            'IAD': iads,
        })
    return pd.DataFrame(resumen)

tabla_resumen = calcular_resumen(tabla_base)

# %% [markdown]
# --- VISUALIZACI칍N DEL RESUMEN DE DESIGUALDAD ---
st.subheader(f"游늴 Resumen de Desigualdades por A침o - {eje_desigualdad} ({indicador_salud})")
tabla_transpuesta = tabla_resumen.set_index('A침o').T
def color_semaforo_transpuesta(val, col_name):
    try:
        # Convertir a float por si hay datos no num칠ricos
        num_val = float(val)
    except ValueError:
        return ''
    
    if col_name == 'Brecha Absoluta':
        # Usar valor absoluto para considerar ambos lados
        return 'background-color: #FFCDD2' if abs(num_val) > 10 else ''
    elif col_name == 'IRD':
        # Usar valor absoluto para considerar ambos lados
        return 'background-color: #C8E6C9' if abs(num_val) < 2 else ''
    return ''

styled = tabla_transpuesta.style
for variable in ['Brecha Absoluta', 'IRD']:
    # Aplicar solo si la fila existe en el DataFrame
    if variable in tabla_transpuesta.index:
        styled = styled.apply(
            lambda row, var=variable: [color_semaforo_transpuesta(v, var) for v in row],
            axis=1, 
            subset=pd.IndexSlice[variable, :]
        )

st.dataframe(styled, use_container_width=True)

st.markdown("""  
游린 **Brecha Absoluta** destacada en rojo indica una diferencia mayor a 10 casos por 100,000 habitantes, lo que sugiere una alta desigualdad.<br>  
游릴 **IRD** en verde se침ala valores menores a 2, lo que indica una menor desigualdad relativa entre quintiles.  
""", unsafe_allow_html=True)
# %% [markdown]
# --- INTERPRETACI칍N DIN츼MICA ---
st.write("### 游늰 Selecci칩n de a침o para interpretar los resultados")
anio_seleccionado = st.selectbox("Selecciona el a침o a visualizar", options=years)
filtro = tabla_resumen[tabla_resumen['A침o'] == anio_seleccionado]
tasa_q1_sel = filtro['Tasa Q1'].values[0]
tasa_q5_sel = filtro['Tasa Q5'].values[0]
brecha_abs_sel = filtro['Brecha Absoluta'].values[0]

st.markdown(f"""
### 游댌 Interpretaci칩n para el a침o {anio_seleccionado}

- En {anio_seleccionado}, la tasa en el quintil m치s desfavorecido (Q1) fue de {tasa_q1_sel} casos por 100,000, mientras que en el quintil m치s favorecido (Q5) fue de {tasa_q5_sel}.
- Esto representa una brecha absoluta de {brecha_abs_sel:.2f} casos por 100,000 habitantes.
- Una brecha creciente puede indicar un empeoramiento del indicador de salud seg칰n {indicador_salud}, seg칰n el eje de desigualdad estudiado ({eje_desigualdad}).
""")

# %% [markdown]
# --- GR츼FICO DE BARRAS CON TODOS LOS A칌OS ---
tabla_base[['IC Inferior', 'IC Superior']] = tabla_base['IC 95%'].str.split(' - ', expand=True).astype(float)

fig = go.Figure()
for year in years:
    df_year = tabla_base[tabla_base['A침o'] == year]
    fig.add_trace(go.Bar(
        x=df_year['Quintil'],
        y=df_year['Tasa Incidencia (x100k)'],
        name=str(year),
        error_y=dict(
            type='data',
            symmetric=False,
            array=df_year['IC Superior'] - df_year['Tasa Incidencia (x100k)'],
            arrayminus=df_year['Tasa Incidencia (x100k)'] - df_year['IC Inferior']
        ),
        text=df_year['IC 95%'],
        hoverinfo='x+y+text'
    ))

fig.update_layout(
    barmode='group',
    title=f"Tasa Incidencia por Quintil y A침o ({indicador_salud})",
    xaxis_title="Quintil",
    yaxis_title="Tasa Incidencia (x100k)",
    bargap=0.15,
    bargroupgap=0.1,
)

st.plotly_chart(fig, use_container_width=True)

# %% [markdown]
# --- GLOSARIO ---
st.sidebar.markdown("## 游닄 Glosario")
st.sidebar.markdown("""
- **Tasa de Incidencia:** Casos nuevos por 100,000 habitantes.
- **Brecha Relativa:** Raz칩n Q5 / Q1.
- **IRD:** 칈ndice Relativo de Desigualdad.
- **IAD:** 칈ndice Absoluto de Desigualdad.
- **Quintil:** 20% de la poblaci칩n seg칰n eje de desigualdad.
""")
